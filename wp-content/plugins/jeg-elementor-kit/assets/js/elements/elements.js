/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./jeg-elementor-kit/assets/dev/js/accordion.js":
/*!******************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/accordion.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitAccordion extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-accordion',\n        cards: '.card-wrapper'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $cards: this.$element.find(selectors.cards)\n    };\n  }\n\n  bindEvents() {\n    this.onClick();\n  }\n\n  onClick() {\n    this.elements.$cards.each(function () {\n      jQuery(this).on('click', function (e) {\n        e.preventDefault();\n\n        if (jQuery(this).hasClass('expand')) {\n          jQuery(this).find('.card-expand').slideUp();\n          jQuery(this).removeClass('expand');\n        } else {\n          jQuery(this).parent().find('.card-expand').slideUp();\n          jQuery(this).parent().find('.card-wrapper').removeClass('expand');\n          jQuery(this).addClass('expand');\n          jQuery(this).find('.card-expand').slideDown();\n        }\n      });\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitAccordion, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_accordion.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/accordion.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/animated-text.js":
/*!**********************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/animated-text.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitAnimatedText extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-animated-text',\n        dynamic: '.dynamic-wrapper'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $dynamic: this.$element.find(selectors.dynamic)\n    };\n  }\n\n  bindEvents() {\n    this.onRenderElement();\n  }\n\n  onRenderElement() {\n    const animation = this.elements.$wrapper.data('style');\n\n    if ('rotating' == animation) {\n      const rotate = this.elements.$wrapper.data('rotate'),\n            dynamic_text = this.elements.$dynamic.find('.dynamic-text');\n\n      if (dynamic_text.length > 0) {\n        const firstText = dynamic_text.first();\n\n        if (['typing', 'swirl', 'blinds', 'wave'].includes(rotate)) {\n          this.animateText(firstText, this.getNextText(firstText));\n        } else {\n          this.showText(firstText, this.getNextText(firstText));\n        }\n      }\n    }\n  }\n\n  animateText(text, nextText) {\n    this.elements.$dynamic.removeClass('typing-delete');\n    text.addClass('show-text');\n    this.elements.$dynamic.removeClass('cursor-blink');\n    this.animateLetter(text.find('.dynamic-text-letter').first(), text, nextText);\n  }\n\n  animateLetter(letter, text, nextText) {\n    const $this = this,\n          letter_speed = this.elements.$wrapper.data('letter-speed');\n    letter.addClass('show-letter');\n    setTimeout(function () {\n      if (letter.is(':last-child')) {\n        $this.hideText(text, nextText);\n      } else {\n        $this.animateLetter(letter.next(), text, nextText);\n      }\n    }, letter_speed);\n  }\n\n  getNextText(text) {\n    return text.is(':last-child') ? this.elements.$dynamic.find('.dynamic-text').first() : text.next();\n  }\n\n  hideText(text, nextText) {\n    const $this = this,\n          rotate = $this.elements.$wrapper.data('rotate'),\n          delay = $this.elements.$wrapper.data('delay');\n    this.elements.$dynamic.addClass('cursor-blink');\n    setTimeout(function () {\n      if ('typing' == rotate) {\n        const delay_delete = $this.elements.$wrapper.data('delay-delete');\n        $this.elements.$dynamic.addClass('typing-delete');\n        setTimeout(function () {\n          text.removeClass('show-text');\n          text.find('.dynamic-text-letter').removeClass('show-letter');\n          $this.animateText(nextText, $this.getNextText(nextText));\n        }, delay_delete);\n      } else {\n        text.removeClass('show-text');\n        text.find('.dynamic-text-letter').removeClass('show-letter');\n        $this.animateText(nextText, $this.getNextText(nextText));\n      }\n    }, delay);\n  }\n\n  showText(text, nextText) {\n    const $this = this,\n          delay = $this.elements.$wrapper.data('delay'),\n          rotate = $this.elements.$wrapper.data('rotate');\n    text.addClass('show-text');\n\n    if (rotate == 'clip') {\n      const clip_duration = $this.elements.$wrapper.data('clip-duration');\n      $this.elements.$dynamic.width(text.width() + 10);\n      $this.elements.$dynamic.animate({\n        width: 0\n      }, clip_duration / 2, function () {\n        text.removeClass('show-text');\n        nextText.addClass('show-text');\n        $this.elements.$dynamic.animate({\n          width: nextText.width() + 10\n        }, clip_duration / 2, function () {\n          setTimeout(function () {\n            text.removeClass('show-text');\n            $this.showText(nextText, $this.getNextText(nextText));\n          }, delay);\n        });\n      });\n    } else {\n      $this.elements.$dynamic.width(text.width());\n      setTimeout(function () {\n        text.removeClass('show-text');\n        $this.showText(nextText, $this.getNextText(nextText));\n      }, delay);\n    }\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitAnimatedText, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_animated_text.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/animated-text.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/client-logo.js":
/*!********************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/client-logo.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitClientLogo extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-client-logo',\n        items: '.client-track'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $items: this.$element.find(selectors.items)\n    };\n  }\n\n  bindEvents() {\n    this.onLoadElement();\n  }\n\n  onLoadElement() {\n    this.loadCarousel();\n  }\n\n  loadCarousel() {\n    const id = this.elements.$wrapper.data('id'),\n          options = this.elements.$wrapper.data('settings'),\n          selectors = this.getSettings('selectors'),\n          responsive = options.responsive,\n          responsiveAttr = {};\n    let lastBreak = undefined;\n    Object.entries(responsive).forEach(([key, value]) => {\n      if (value.items !== '' || value.margin !== '') {\n        responsiveAttr[value.breakpoint] = {};\n        lastBreak = value.breakpoint;\n\n        if (value.items !== '') {\n          responsiveAttr[value.breakpoint].items = value.items;\n        }\n\n        if (value.margin !== '') {\n          responsiveAttr[value.breakpoint].gutter = value.margin;\n        }\n      }\n    });\n\n    if (lastBreak !== undefined && lastBreak !== 0) {\n      responsiveAttr[0] = responsiveAttr[lastBreak];\n      delete responsiveAttr[lastBreak];\n    }\n\n    const attr = {\n      container: selectors.wrapper + '[data-id=\"' + id + '\"] ' + selectors.items,\n      loop: true,\n      mouseDrag: true,\n      autoplay: options.autoplay,\n      autoplayTimeout: options.autoplay_speed,\n      autoplayHoverPause: options.autoplay_hover_pause,\n      navPosition: 'bottom',\n      controlsPosition: options.arrow_position,\n      controlsText: [options.navigation_left, options.navigation_right],\n      responsiveClass: true,\n      responsive: responsiveAttr\n    };\n    tns(attr);\n    this.elements.$wrapper.find('button[data-action]').remove();\n\n    if (!options.show_navigation) {\n      this.elements.$wrapper.find('.tns-controls').remove();\n    }\n\n    if (!options.show_dots) {\n      this.elements.$wrapper.find('.tns-nav').remove();\n    }\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitClientLogo, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_client_logo.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/client-logo.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/countdown.js":
/*!******************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/countdown.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitCountdown extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-countdown',\n        days: '.timer-container.timer-days',\n        hours: '.timer-container.timer-hours',\n        minutes: '.timer-container.timer-minutes',\n        seconds: '.timer-container.timer-seconds',\n        counts: '.timer-container .timer-count'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $days: this.$element.find(selectors.days),\n      $hours: this.$element.find(selectors.hours),\n      $minutes: this.$element.find(selectors.minutes),\n      $seconds: this.$element.find(selectors.seconds),\n      $counts: this.$element.find(selectors.counts)\n    };\n  }\n\n  bindEvents() {\n    this.onRender();\n  }\n\n  onRender() {\n    const $this = this,\n          date = new Date($this.elements.$wrapper.data('due-date')).getTime();\n    const x = setInterval(function () {\n      const now = new Date(),\n            distance = date - now,\n            days = Math.floor(distance / (1000 * 60 * 60 * 24)),\n            hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n            minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60)),\n            seconds = Math.floor(distance % (1000 * 60) / 1000);\n      $this.elements.$counts.removeClass('timer-loading');\n\n      if (distance >= 0) {\n        if ($this.elements.$days) {\n          $this.elements.$days.find('.timer-count').text(days);\n        }\n\n        if ($this.elements.$hours) {\n          $this.elements.$hours.find('.timer-count').text(hours);\n        }\n\n        if ($this.elements.$minutes) {\n          $this.elements.$minutes.find('.timer-count').text(minutes);\n        }\n\n        if ($this.elements.$seconds) {\n          $this.elements.$seconds.find('.timer-count').text(seconds);\n        }\n      } else {\n        clearInterval(x);\n        $this.elements.$wrapper.addClass('countdown-expired');\n        $this.onExpired();\n      }\n    }, 1000);\n  }\n\n  onExpired() {\n    const $this = this,\n          wrapper = $this.elements.$wrapper,\n          type = wrapper.data('expired-type');\n\n    if (type == 'message') {\n      const title = wrapper.data('expired-title'),\n            content = wrapper.data('expired-content');\n      wrapper.html(`\n        <div class=\"expire-message\">\n          <span class=\"expire-title\">${title}</span>\n          <span class=\"expire-content\">${content}</span>\n        </div>\n      `);\n    } else if (type == 'redirect') {\n      const link = wrapper.data('redirect-link');\n\n      if (window.self !== window.top) {\n        wrapper.html(`<div class=\"expire-message\">\n            <span class=\"expire-content\">${iframe_content}</span>\n          </div>\n        `);\n      } else {\n        location.href = link;\n      }\n    } else if (type == 'template') {\n      const template = wrapper.data('template');\n      wrapper.html(template);\n    }\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitCountdown, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_countdown.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/countdown.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/fun-fact.js":
/*!*****************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/fun-fact.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitFunFact extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-fun-fact',\n        number: '.number'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $number: this.$element.find(selectors.number)\n    };\n  }\n\n  bindEvents() {\n    this.onLoadElement();\n  }\n\n  onLoadElement() {\n    this.countNumber();\n    jQuery(window).on('scroll', this.countNumber.bind(this));\n  }\n\n  countNumber() {\n    const el = this.elements.$number;\n\n    if (this.onScreen() && !el.hasClass('loaded')) {\n      el.prop('Counter', 0).animate({\n        Counter: el.data('value')\n      }, {\n        duration: el.data('animation-duration'),\n        easing: 'swing',\n        step: function (now) {\n          el.text(Math.ceil(now).toLocaleString());\n        },\n        complete: function () {\n          el.text(el.data('value').toLocaleString());\n        }\n      });\n      el.addClass('loaded');\n    }\n  }\n\n  onScreen() {\n    const windowBottomEdge = jQuery(window).scrollTop() + jQuery(window).height(),\n          elementTopEdge = this.elements.$wrapper.offset().top;\n    return elementTopEdge <= windowBottomEdge;\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitFunFact, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_fun_fact.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/fun-fact.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/gallery.js":
/*!****************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/gallery.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitGallery extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-gallery',\n        grid: '.gallery-items',\n        active_label: '.jkit-gallery-control.active',\n        filter: '.jkit-gallery-control',\n        filter_button: '#search-filter-trigger',\n        filter_label: '#search-filter-trigger span',\n        filter_list: '.search-filter-controls',\n        filter_form: '#jkit-gallery-search-box-input',\n        load_more: '.jkit-gallery-load-more'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $grid: this.$element.find(selectors.grid),\n      $active_label: this.$element.find(selectors.active_label),\n      $filter: this.$element.find(selectors.filter),\n      $filter_button: this.$element.find(selectors.filter_button),\n      $filter_label: this.$element.find(selectors.filter_label),\n      $filter_list: this.$element.find(selectors.filter_list),\n      $filter_form: this.$element.find(selectors.filter_form),\n      $load_more: this.$element.find(selectors.load_more)\n    };\n  }\n\n  bindEvents() {\n    const $this = this,\n          layout = $this.elements.$wrapper.data('grid') == 'masonry' ? 'masonry' : 'fitRows',\n          duration = parseFloat(($this.elements.$wrapper.data('animation-duration') / 1000).toFixed(2)).toString() + 's';\n    $this.grid = $this.elements.$grid.isotope({\n      itemSelector: '.gallery-item-wrap',\n      layoutMode: layout,\n      transitionDuration: duration\n    });\n    $this.grid.imagesLoaded().progress(function () {\n      $this.grid.isotope('layout');\n    });\n    $this.onInitGallery();\n    $this.onClickFilterButton();\n    $this.onClickLoadMoreButton();\n    $this.onFormChange();\n  }\n\n  onInitGallery() {\n    const $this = this;\n    $this.elements.$filter.each(function () {\n      jQuery(this).on('click', function (e) {\n        e.preventDefault();\n        const selectors = $this.getSettings('selectors'),\n              filter_value = jQuery(this).data('filter'),\n              filter_label = $this.elements.$filter_label,\n              filter_list = $this.elements.$filter_list,\n              filter_button = $this.elements.$filter_button,\n              filter_form = $this.elements.$filter_form,\n              filter = $this.elements.$filter;\n        filter.removeClass('active');\n        jQuery(this).addClass('active');\n        $this.elements.$active_label = $this.$element.find(selectors.active_label);\n        $this.grid.isotope({\n          filter: function () {\n            const class_filter = filter_value !== '*' ? filter_value.substring(1) : '*',\n                  class_list = jQuery(this).attr('class').split(/\\s+/);\n            let check_filter = false;\n\n            if (filter_button.length > 0) {\n              const text = filter_form.val(),\n                    name = jQuery(this).find('.item-title').text(),\n                    content = jQuery(this).find('.item-content').text();\n              check_filter = class_filter != '*' ? (name.toLowerCase().includes(text.toLowerCase()) || content.toLowerCase().includes(text.toLowerCase())) && class_list.includes(class_filter) : name.toLowerCase().includes(text.toLowerCase()) || content.toLowerCase().includes(text.toLowerCase());\n            } else {\n              check_filter = class_filter != '*' ? class_list.includes(class_filter) : true;\n            }\n\n            return check_filter;\n          }\n        });\n\n        if (filter_button.length > 0) {\n          filter_label.text(jQuery(this).text());\n          filter_list.removeClass('open-controls');\n        }\n      });\n    });\n  }\n\n  onClickFilterButton() {\n    const $this = this;\n    $this.elements.$filter_button.on('click', function (e) {\n      e.preventDefault();\n      const filter_list = $this.elements.$filter_list;\n\n      if (filter_list.hasClass('open-controls')) {\n        filter_list.removeClass('open-controls');\n      } else {\n        filter_list.addClass('open-controls');\n      }\n    });\n  }\n\n  onFormChange() {\n    const $this = this,\n          filter_form = $this.elements.$filter_form;\n\n    if (filter_form !== undefined) {\n      filter_form.on('change paste keyup', function () {\n        const text = jQuery(this).val();\n        $this.grid.isotope({\n          filter: function () {\n            const name = jQuery(this).find('.item-title').text(),\n                  content = jQuery(this).find('.item-content').text(),\n                  class_list = jQuery(this).attr('class').split(/\\s+/),\n                  class_filter = $this.elements.$active_label.data('filter') !== '*' ? $this.elements.$active_label.data('filter').substring(1) : '*';\n            let check_filter = false;\n\n            if (class_filter == '*') {\n              check_filter = name.toLowerCase().includes(text.toLowerCase()) || content.toLowerCase().includes(text.toLowerCase());\n            } else {\n              check_filter = (name.toLowerCase().includes(text.toLowerCase()) || content.toLowerCase().includes(text.toLowerCase())) && class_list.includes(class_filter);\n            }\n\n            return check_filter;\n          }\n        });\n      });\n    }\n  }\n\n  onClickLoadMoreButton() {\n    const $this = this,\n          items = $this.elements.$wrapper.data('items');\n    $this.elements.$load_more.on('click', function (e) {\n      e.preventDefault();\n      const current_loaded = parseInt($this.elements.$wrapper.attr('data-current-loaded')),\n            count_items = parseInt($this.elements.$wrapper.attr('data-count-items')),\n            load_more = parseInt($this.elements.$wrapper.attr('data-load-more')),\n            no_more_text = $this.elements.$wrapper.attr('data-no-more');\n\n      if (count_items > current_loaded) {\n        if (count_items - load_more - current_loaded > 0) {\n          const items_append = [...items].splice(current_loaded, load_more);\n          $this.grid.append(items_append).isotope('reloadItems').isotope();\n          $this.grid.imagesLoaded().progress(function () {\n            $this.grid.isotope('layout');\n          });\n          $this.elements.$wrapper.attr('data-current-loaded', current_loaded + load_more);\n        } else {\n          const items_append = [...items].splice(current_loaded, count_items - current_loaded);\n          $this.grid.append(items_append).isotope('reloadItems').isotope();\n          $this.grid.imagesLoaded().progress(function () {\n            $this.grid.isotope('layout');\n          });\n          $this.elements.$wrapper.attr('data-current-loaded', count_items);\n          $this.elements.$load_more.find('.load-more-text').text(no_more_text);\n          setTimeout(function () {\n            $this.elements.$load_more.fadeOut('slow');\n          }, 600);\n        }\n      }\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitGallery, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_gallery.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/gallery.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/mailchimp.js":
/*!******************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/mailchimp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitMailchimp extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-mailchimp',\n        form: '.jkit-mailchimp-form'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $form: this.$element.find(selectors.form)\n    };\n  }\n\n  bindEvents() {\n    this.onSubmit();\n  }\n\n  onSubmit() {\n    this.elements.$form.on('submit', function (e) {\n      e.preventDefault();\n      const message = jQuery(this).find('.jkit-mailchimp-message');\n      const error_message = jQuery(this).data('error-message');\n      const success_message = jQuery(this).data('success-message');\n      const data = {\n        first_name: jQuery(this).find('input[name=\"first-name\"]').val(),\n        last_name: jQuery(this).find('input[name=\"last-name\"]').val(),\n        phone: jQuery(this).find('input[name=\"phone\"]').val(),\n        email: jQuery(this).find('input[name=\"email\"]').val(),\n        list: jQuery(this).data('listed')\n      };\n      message.removeClass('error success');\n      jQuery.ajax({\n        type: 'POST',\n        url: jkit_ajax_url,\n        data: {\n          data: data,\n          action: 'jkit_element_ajax_jkit_mailchimp'\n        },\n        dataType: 'json',\n        encode: true\n      }).done(function (data) {\n        if (data.status_code >= 400) {\n          message.addClass('error');\n          message.text(data.message);\n        } else {\n          message.addClass('success');\n          message.text(success_message);\n        }\n      }).fail(function () {\n        message.addClass('error');\n        message.text(error_message);\n      });\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitMailchimp, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_mailchimp.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/mailchimp.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/nav-menu.js":
/*!*****************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/nav-menu.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitNavMenu extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-nav-menu',\n        container: '.jkit-menu-wrapper',\n        open_toggle: '.jkit-hamburger-menu',\n        close_toggle: '.jkit-close-menu',\n        dropdown_toggle: 'li.menu-item-has-children > a i',\n        menu_dropdown: 'li.menu-item-has-children > a'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $container: this.$element.find(selectors.container),\n      $open_toggle: this.$element.find(selectors.open_toggle),\n      $close_toggle: this.$element.find(selectors.close_toggle),\n      $dropdown_toggle: this.$element.find(selectors.dropdown_toggle),\n      $menu_dropdown: this.$element.find(selectors.menu_dropdown)\n    };\n  }\n\n  bindEvents() {\n    this.onLoadElement();\n  }\n\n  onLoadElement() {\n    this.addBodyClass();\n    this.addDropdownIcon();\n    this.onToogleClick();\n  }\n\n  addBodyClass() {\n    if (this.elements.$wrapper.length > 0) {\n      jQuery('body').addClass('jkit-nav-menu-loaded');\n    }\n  }\n\n  addDropdownIcon() {\n    const $this = this,\n          indicator = $this.elements.$wrapper.data('item-indicator'),\n          dropdown = $this.elements.$menu_dropdown,\n          selectors = this.getSettings('selectors');\n    dropdown.each(function () {\n      if (jQuery(this).find('i').length == 0) {\n        jQuery(this).append(indicator);\n      }\n    });\n    $this.elements.$dropdown_toggle = this.$element.find(selectors.dropdown_toggle);\n  }\n\n  onToogleClick() {\n    const $this = this,\n          wrapper = $this.elements.$wrapper,\n          menu_dropdown = $this.elements.$menu_dropdown,\n          open_toggle = $this.elements.$open_toggle,\n          close_toggle = $this.elements.$close_toggle,\n          dropdown_toggle = $this.elements.$dropdown_toggle;\n    open_toggle.on('click', function (e) {\n      e.preventDefault();\n\n      if ($this.elements.$container.hasClass('active')) {\n        $this.elements.$container.removeClass('active');\n      } else {\n        $this.elements.$container.addClass('active');\n      }\n    });\n    close_toggle.on('click', function (e) {\n      e.preventDefault();\n      $this.elements.$container.removeClass('active');\n    });\n\n    if (wrapper.hasClass('submenu-click-title')) {\n      menu_dropdown.each(function () {\n        jQuery(this).on('click', function (e) {\n          e.preventDefault();\n          const dropdown = jQuery(this).next();\n\n          if (dropdown.hasClass('dropdown-open')) {\n            dropdown.removeClass('dropdown-open');\n          } else {\n            dropdown.addClass('dropdown-open');\n          }\n        });\n      });\n    } else {\n      dropdown_toggle.each(function () {\n        jQuery(this).on('click', function (e) {\n          e.preventDefault();\n          const dropdown = jQuery(this).parents('a').next();\n\n          if (dropdown.hasClass('dropdown-open')) {\n            dropdown.removeClass('dropdown-open');\n          } else {\n            dropdown.addClass('dropdown-open');\n          }\n        });\n      });\n    }\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitNavMenu, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_nav_menu.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/nav-menu.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/off-canvas.js":
/*!*******************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/off-canvas.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitOffCanvas extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-off-canvas',\n        sidebar: '.offcanvas-sidebar',\n        hamburger: '.offcanvas-sidebar-button',\n        close: '.offcanvas-close-button',\n        overlay: '.bg-overlay'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $sidebar: this.$element.find(selectors.sidebar),\n      $hamburger: this.$element.find(selectors.hamburger),\n      $close: this.$element.find(selectors.close),\n      $overlay: this.$element.find(selectors.overlay)\n    };\n  }\n\n  bindEvents() {\n    const $this = this;\n    $this.elements.$hamburger.on('click', function () {\n      if ($this.elements.$sidebar.hasClass('active')) {\n        $this.elements.$sidebar.removeClass('active');\n      } else {\n        $this.elements.$sidebar.addClass('active');\n      }\n    });\n    $this.elements.$close.on('click', function () {\n      $this.elements.$sidebar.removeClass('active');\n    });\n    $this.elements.$overlay.on('click', function () {\n      $this.elements.$sidebar.removeClass('active');\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitOffCanvas, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_off_canvas.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/off-canvas.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/pie-chart.js":
/*!******************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/pie-chart.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitPieChart extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-pie-chart',\n        canvas_main: 'canvas.main-canvas',\n        canvas_bg: 'canvas.background-canvas',\n        number: '.pie-chart-content'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $canvas_main: this.$element.find(selectors.canvas_main),\n      $canvas_bg: this.$element.find(selectors.canvas_bg),\n      $number: this.$element.find(selectors.number)\n    };\n  }\n\n  bindEvents() {\n    this.animateChart();\n    jQuery(window).on('scroll', this.animateChart.bind(this));\n\n    if (this.elements.$wrapper.data('content-type') == 'percentage') {\n      this.countNumber();\n      jQuery(window).on('scroll', this.countNumber.bind(this));\n    }\n  }\n\n  animateChart() {\n    const $this = this,\n          canvas_main = $this.elements.$canvas_main,\n          canvas_bg = $this.elements.$canvas_bg;\n\n    if (this.onScreen() && !canvas_main.hasClass('loaded')) {\n      const wrapper = $this.elements.$wrapper,\n            ctx_main = canvas_main.get(0).getContext('2d'),\n            ctx_bg = canvas_bg.get(0).getContext('2d'),\n            percent = wrapper.data('percent'),\n            cutout = wrapper.data('cutout'),\n            color_type = wrapper.data('color-type'),\n            color = wrapper.data('color'),\n            bg_color = wrapper.data('bg-color'),\n            gradient1 = wrapper.data('gradient1'),\n            gradient2 = wrapper.data('gradient2'),\n            animation_duration = wrapper.data('animation-duration'),\n            data_main = {\n        datasets: [{\n          data: [percent, 100 - percent],\n          backgroundColor: [\"#80b1ff\", 'transparent'],\n          hoverBackgroundColor: [\"#80b1ff\", 'transparent'],\n          borderWidth: 0\n        }]\n      },\n            data_bg = {\n        datasets: [{\n          data: [100],\n          backgroundColor: [\"#d1d1d1\"],\n          hoverBackgroundColor: [\"#d1d1d1\"],\n          borderWidth: 0\n        }]\n      },\n            options_main = {\n        animation: {\n          duration: animation_duration\n        },\n        responsive: true,\n        cutoutPercentage: cutout,\n        title: {\n          display: false\n        },\n        legend: {\n          display: false\n        },\n        tooltips: {\n          enabled: false\n        }\n      },\n            options_bg = {\n        animation: false,\n        responsive: true,\n        cutoutPercentage: cutout,\n        title: {\n          display: false\n        },\n        legend: {\n          display: false\n        },\n        tooltips: {\n          enabled: false\n        }\n      };\n\n      if (color_type == 'normal') {\n        if (color !== '') {\n          data_main.datasets[0].backgroundColor[0] = color;\n          data_main.datasets[0].hoverBackgroundColor[0] = color;\n        }\n      } else if (color_type == 'gradient' && (gradient1 !== '' || gradient2 !== '')) {\n        const gradientFill = ctx_main.createLinearGradient(0, 0, 0, 170);\n\n        if (gradient1 !== '') {\n          gradientFill.addColorStop(0, gradient1);\n        }\n\n        if (gradient2 !== '') {\n          gradientFill.addColorStop(1, gradient2);\n        }\n\n        data_main.datasets[0].backgroundColor[0] = gradientFill;\n        data_main.datasets[0].hoverBackgroundColor[0] = gradientFill;\n      }\n\n      if (bg_color !== '') {\n        data_bg.datasets[0].backgroundColor[0] = bg_color;\n        data_bg.datasets[0].hoverBackgroundColor[0] = bg_color;\n      }\n\n      new Chart(ctx_main, {\n        type: 'doughnut',\n        data: data_main,\n        options: options_main\n      });\n      new Chart(ctx_bg, {\n        type: 'doughnut',\n        data: data_bg,\n        options: options_bg\n      });\n      canvas_main.addClass('loaded');\n      canvas_main.css('display', '');\n      canvas_bg.css('display', '');\n    }\n  }\n\n  countNumber() {\n    const number = this.elements.$number,\n          wrapper = this.elements.$wrapper;\n\n    if (this.onScreen() && !number.hasClass('loaded')) {\n      number.prop('Counter', 0).animate({\n        Counter: wrapper.data('percent')\n      }, {\n        duration: wrapper.data('animation-duration'),\n        easing: 'swing',\n        step: function (now) {\n          number.text(Math.ceil(now).toString() + '%');\n        }\n      });\n      number.addClass('loaded');\n    }\n  }\n\n  onScreen() {\n    const windowBottomEdge = jQuery(window).scrollTop() + jQuery(window).height(),\n          elementTopEdge = this.elements.$wrapper.offset().top;\n    return elementTopEdge <= windowBottomEdge;\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitPieChart, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_pie_chart.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/pie-chart.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/portfolio-gallery.js":
/*!**************************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/portfolio-gallery.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitPortfolioGallery extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-portfolio-gallery',\n        row_items: '.row-item',\n        gallery_items: '.gallery-items',\n        image_items: '.image-item'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $row_items: this.$element.find(selectors.row_items),\n      $gallery_items: this.$element.find(selectors.gallery_items),\n      $image_items: this.$element.find(selectors.image_items)\n    };\n  }\n\n  bindEvents() {\n    this.onRenderInit();\n    this.onClickHover();\n  }\n\n  onRenderInit() {\n    const $this = this,\n          row_items = $this.elements.$row_items,\n          image_items = $this.elements.$image_items;\n    jQuery(row_items.get().reverse()).each(function () {\n      if (jQuery(this).hasClass('current-item')) {\n        row_items.removeClass('current-item');\n        jQuery(this).addClass('current-item');\n      }\n    });\n    jQuery(image_items.get().reverse()).each(function () {\n      if (jQuery(this).hasClass('current-item')) {\n        image_items.removeClass('current-item');\n        jQuery(this).addClass('current-item');\n      }\n    });\n  }\n\n  onClickHover() {\n    const $this = this,\n          wrapper = $this.elements.$wrapper,\n          row_items = $this.elements.$row_items;\n\n    if (wrapper.hasClass('on-click')) {\n      row_items.each(function () {\n        jQuery(this).on({\n          click: function () {\n            row_items.removeClass('current-item');\n            jQuery(this).addClass('current-item');\n            $this.onShowImage(jQuery(this).data('tab'));\n          }\n        });\n      });\n    }\n\n    if (wrapper.hasClass('on-hover')) {\n      row_items.each(function () {\n        jQuery(this).on({\n          mouseenter: function () {\n            row_items.removeClass('current-item');\n            jQuery(this).addClass('current-item');\n            $this.onShowImage(jQuery(this).data('tab'));\n          }\n        });\n      });\n    }\n  }\n\n  onShowImage(id) {\n    this.elements.$image_items.removeClass('current-item');\n    this.elements.$gallery_items.find('#' + id).addClass('current-item');\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitPortfolioGallery, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_portfolio_gallery.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/portfolio-gallery.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/post-pagination.js":
/*!************************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/post-pagination.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitPostPagination extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.post-element',\n        pagination: '.jkit-block-pagination'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $pagination: this.$element.find(selectors.pagination)\n    };\n  }\n\n  bindEvents() {\n    this.onInitPagination();\n  }\n\n  onInitPagination() {\n    const $this = this,\n          wrapper = $this.elements.$wrapper,\n          pagination = $this.elements.$pagination,\n          options = wrapper.data('settings'),\n          load_limit = options.pagination_scroll_limit,\n          pagination_mode = options.pagination_mode,\n          parameter = {\n      'action': jkit_element_pagination_option.element_prefix + options.class,\n      'data': {\n        'current_page': 1,\n        'attr': options\n      }\n    };\n    let lock_load = false,\n        xhr_cache = [];\n\n    const scroll_handler = function () {\n      if (!lock_load && !pagination.hasClass('disabled') && window.self == window.top) {\n        if (load_limit >= parameter.data.current_page || load_limit == '0') {\n          pagination.find('a').waypoint(function () {\n            request_ajax();\n            this.destroy();\n          }, {\n            offset: '100%',\n            context: window\n          });\n        }\n      }\n    };\n\n    const save_cache = function (parameter, response) {\n      xhr_cache.push({\n        param: JSON.stringify(parameter),\n        result: response\n      });\n    };\n\n    const get_cache = function (parameter) {\n      const jsonparam = JSON.stringify(parameter);\n\n      for (let i = 0; i < xhr_cache.length; i++) {\n        if (jsonparam === xhr_cache[i].param) {\n          return prepare_cache(xhr_cache[i].result);\n        }\n      }\n    };\n\n    const prepare_cache = function (result) {\n      result.content = '<div>' + result.content + '</div>';\n      const content = jQuery(result.content);\n      result.content = content.html();\n      return result;\n    };\n\n    const render_ajax_response = function (response) {\n      const content = jQuery(response.content);\n      let count = 0;\n      content.each(function () {\n        if (jQuery(this).hasClass('jkit-post')) {\n          jQuery(this).addClass('jkit-ajax-loaded anim-' + count);\n        }\n\n        count++;\n      });\n      wrapper.removeClass('loading');\n      wrapper.addClass('loaded');\n      wrapper.find('.jkit-ajax-flag').append(content);\n\n      if (!response.next) {\n        pagination.addClass('disabled');\n        pagination.hide();\n      }\n\n      request_after_ajax();\n      jQuery(window).trigger('resize');\n\n      if ('scrollload' === pagination_mode) {\n        setTimeout(function () {\n          scroll_handler();\n        }, 500);\n      }\n    };\n\n    const request_ajax = function () {\n      request_before_ajax();\n      parameter.data.current_page = parameter.data.current_page + 1;\n      const result = get_cache(parameter);\n\n      if (result) {\n        render_ajax_response(result);\n      } else {\n        jQuery.ajax({\n          url: jkit_ajax_url,\n          type: 'post',\n          dataType: 'json',\n          data: parameter,\n          success: function (response) {\n            render_ajax_response(response);\n            save_cache(parameter, response);\n          }\n        });\n      }\n    };\n\n    const request_before_ajax = function () {\n      lock_load = true;\n      pagination.addClass('loading');\n      pagination.find('a').text(pagination.find('a').data('loading'));\n      wrapper.addClass('loading');\n    };\n\n    const request_after_ajax = function () {\n      lock_load = false;\n      pagination.removeClass('loading');\n      pagination.find('a').text(pagination.find('a').data('load'));\n    };\n\n    if ('scrollload' === pagination_mode) {\n      scroll_handler();\n    }\n\n    pagination.find('a').on('click', function (e) {\n      e.preventDefault();\n\n      if (!lock_load && !pagination.hasClass('disabled')) {\n        request_ajax();\n      }\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitPostPagination, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_post_block.default', addHandler);\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_post_list.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/post-pagination.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/progress-bar.js":
/*!*********************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/progress-bar.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitProgressBar extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-progress-bar',\n        skill: '.skill-track',\n        number: '.number-percentage'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $skill: this.$element.find(selectors.skill),\n      $number: this.$element.find(selectors.number)\n    };\n  }\n\n  bindEvents() {\n    this.onLoadElement();\n  }\n\n  onLoadElement() {\n    this.countNumber();\n    jQuery(window).on('scroll', this.countNumber.bind(this));\n  }\n\n  countNumber() {\n    const number = this.elements.$number,\n          skill = this.elements.$skill;\n\n    if (this.onScreen() && !number.hasClass('loaded')) {\n      number.prop('Counter', 0).animate({\n        Counter: number.data('value')\n      }, {\n        duration: number.data('animation-duration'),\n        easing: 'swing',\n        step: function (now) {\n          number.text(Math.ceil(now).toString() + '%');\n          skill.css('width', now.toString() + '%');\n        }\n      });\n      number.addClass('loaded');\n    }\n  }\n\n  onScreen() {\n    const windowBottomEdge = jQuery(window).scrollTop() + jQuery(window).height(),\n          elementTopEdge = this.elements.$wrapper.offset().top;\n    return elementTopEdge <= windowBottomEdge;\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitProgressBar, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_progress_bar.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/progress-bar.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/search.js":
/*!***************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/search.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitSearch extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-search'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper)\n    };\n  }\n\n  bindEvents() {\n    const $this = this,\n          wrapper = $this.elements.$wrapper;\n    wrapper.magnificPopup({\n      mainClass: 'mfp-fade jkit-magnific-popup',\n      delegate: 'a.jkit-search-modal',\n      removalDelay: 500,\n      midClick: true,\n      showCloseBtn: true,\n      closeBtnInside: false,\n      prependTo: wrapper,\n      type: \"inline\",\n      fixedContentPos: true,\n      fixedBgPos: true,\n      overflowY: \"auto\"\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitSearch, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_search.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/search.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/tabs.js":
/*!*************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/tabs.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitTabs extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-tabs',\n        tab: 'li.tab-nav',\n        content: '.tab-content-list'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $tab: this.$element.find(selectors.tab),\n      $content: this.$element.find(selectors.content)\n    };\n  }\n\n  bindEvents() {\n    const $this = this;\n    $this.elements.$tab.on('click', function () {\n      const tab_id = jQuery(this).data('tab');\n      $this.elements.$tab.removeClass('active');\n      jQuery(this).addClass('active');\n      $this.elements.$content.find('.tab-content').removeClass('active');\n      $this.elements.$content.find('.' + tab_id).addClass('active');\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitTabs, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_tabs.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/tabs.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/team.js":
/*!*************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/team.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitTeam extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-team',\n        close_modal: '.team-modal-close'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $close_modal: this.$element.find(selectors.close_modal)\n    };\n  }\n\n  bindEvents() {\n    this.onClick();\n  }\n\n  onClick() {\n    const $this = this,\n          wrapper = $this.elements.$wrapper,\n          close_modal = $this.elements.$close_modal;\n    wrapper.magnificPopup({\n      delegate: 'a.jkit-team-modal',\n      removalDelay: 500,\n      callbacks: {\n        beforeOpen: function () {\n          this.st.mainClass = this.st.el.attr('data-effect');\n        }\n      },\n      midClick: true,\n      showCloseBtn: false,\n      prependTo: wrapper,\n      type: \"inline\",\n      fixedContentPos: true,\n      fixedBgPos: true,\n      overflowY: \"auto\"\n    });\n    close_modal.on('click', function (e) {\n      e.preventDefault();\n      jQuery.magnificPopup.close();\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitTeam, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_team.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/team.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/testimonials.js":
/*!*********************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/testimonials.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitTestimonials extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-testimonials',\n        items: '.testimonials-track'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $items: this.$element.find(selectors.items)\n    };\n  }\n\n  bindEvents() {\n    this.onLoadElement();\n  }\n\n  onLoadElement() {\n    this.loadCarousel();\n  }\n\n  loadCarousel() {\n    const id = this.elements.$wrapper.data('id'),\n          selectors = this.getSettings('selectors'),\n          options = this.elements.$wrapper.data('settings'),\n          responsive = options.responsive,\n          responsiveAttr = {};\n    let lastBreak = undefined;\n    Object.entries(responsive).forEach(([key, value]) => {\n      if (value.items !== '' || value.margin !== '') {\n        responsiveAttr[value.breakpoint] = {};\n        lastBreak = value.breakpoint;\n\n        if (value.items !== '') {\n          responsiveAttr[value.breakpoint].items = value.items;\n        }\n\n        if (value.margin !== '') {\n          responsiveAttr[value.breakpoint].gutter = value.margin;\n        }\n      }\n    });\n\n    if (lastBreak !== undefined && lastBreak !== 0) {\n      responsiveAttr[0] = responsiveAttr[lastBreak];\n      delete responsiveAttr[lastBreak];\n    }\n\n    const attr = {\n      container: selectors.wrapper + '[data-id=\"' + id + '\"] ' + selectors.items,\n      loop: true,\n      mouseDrag: true,\n      autoplay: options.autoplay,\n      autoplayTimeout: options.autoplay_speed,\n      autoplayHoverPause: options.autoplay_hover_pause,\n      navPosition: 'bottom',\n      controlsPosition: options.arrow_position,\n      controlsText: [options.navigation_left, options.navigation_right],\n      responsiveClass: true,\n      responsive: responsiveAttr\n    };\n    tns(attr);\n    this.elements.$wrapper.find('button[data-action]').remove();\n\n    if (!options.show_navigation) {\n      this.elements.$wrapper.find('.tns-controls').remove();\n    }\n\n    if (!options.show_dots) {\n      this.elements.$wrapper.find('.tns-nav').remove();\n    }\n\n    if (options.show_navigation) {\n      attr.nav = true;\n      attr.navText = ['<i class=\"' + options.navigation_left + '\" aria-hidden=\"true\"></i>', '<i class=\"' + options.navigation_right + '\" aria-hidden=\"true\"></i>'];\n    }\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitTestimonials, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_testimonials.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/testimonials.js?");

/***/ }),

/***/ "./jeg-elementor-kit/assets/dev/js/video-button.js":
/*!*********************************************************!*\
  !*** ./jeg-elementor-kit/assets/dev/js/video-button.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class JKitVideoButton extends elementorModules.frontend.handlers.Base {\n  getDefaultSettings() {\n    return {\n      selectors: {\n        wrapper: '.jeg-elementor-kit.jkit-video-button',\n        link: '.jeg-elementor-kit.jkit-video-button .jkit-video-popup-btn'\n      }\n    };\n  }\n\n  getDefaultElements() {\n    const selectors = this.getSettings('selectors');\n    return {\n      $wrapper: this.$element.find(selectors.wrapper),\n      $link: this.$element.find(selectors.link)\n    };\n  }\n\n  bindEvents() {\n    this.onClick();\n  }\n\n  onClick() {\n    const wrapper = this.elements.$wrapper,\n          type = wrapper.data('type'),\n          autoplay = wrapper.data('autoplay'),\n          loop = wrapper.data('loop'),\n          controls = wrapper.data('controls');\n    let src = '//www.youtube.com/embed/';\n\n    if ('youtube' == type) {\n      const start = wrapper.data('start'),\n            end = wrapper.data('end');\n      src = src + '?playlist=%id%&autoplay=' + autoplay + '&loop=' + loop + '&controls=' + controls + '&start=' + start + '&end=' + end + '&version=3';\n    } else {\n      const mute = wrapper.data('mute'),\n            title = wrapper.data('title'),\n            portrait = wrapper.data('portrait'),\n            byline = wrapper.data('byline');\n      src = '//player.vimeo.com/video/%id%?autoplay=' + autoplay + '&muted=' + mute + '&loop=' + loop + '&controls=' + controls + '&title=' + title + '&portrait=' + portrait + '&byline=' + byline;\n    }\n\n    this.elements.$link.magnificPopup({\n      type: 'iframe',\n      iframe: {\n        patterns: {\n          youtube: {\n            index: 'youtube.com/',\n            id: function (url) {\n              var m = url.match(/[\\\\?\\\\&]v=([^\\\\?\\\\&]+)/);\n              if (!m || !m[1]) return null;\n              return m[1];\n            },\n            src: src\n          },\n          vimeo: {\n            index: 'vimeo.com/',\n            id: function (url) {\n              var m = url.match(/(https?:\\/\\/)?(www.)?(player.)?vimeo.com\\/([a-z]*\\/)*([0-9]{6,11})[?]?.*/);\n              if (!m || !m[5]) return null;\n              return m[5];\n            },\n            src: src\n          }\n        }\n      },\n      mainClass: 'mfp-fade jkit-magnific-popup',\n      removalDelay: 160,\n      preloader: !0,\n      fixedContentPos: !1,\n      showCloseBtn: true\n    });\n  }\n\n}\n\njQuery(window).on('elementor/frontend/init', () => {\n  const addHandler = $element => {\n    elementorFrontend.elementsHandler.addHandler(JKitVideoButton, {\n      $element\n    });\n  };\n\n  elementorFrontend.hooks.addAction('frontend/element_ready/jkit_video_button.default', addHandler);\n});\n\n//# sourceURL=webpack:///./jeg-elementor-kit/assets/dev/js/video-button.js?");

/***/ }),

/***/ 0:

  !*** multi ./jeg-elementor-kit/assets/dev/js/accordion.js ./jeg-elementor-kit/assets/dev/js/animated-text.js ./jeg-elementor-kit/assets/dev/js/client-logo.js ./jeg-elementor-kit/assets/dev/js/countdown.js ./jeg-elementor-kit/assets/dev/js/fun-fact.js ./jeg-elementor-kit/assets/dev/js/gallery.js ./jeg-elementor-kit/assets/dev/js/mailchimp.js ./jeg-elementor-kit/assets/dev/js/nav-menu.js ./jeg-elementor-kit/assets/dev/js/off-canvas.js ./jeg-elementor-kit/assets/dev/js/pie-chart.js ./jeg-elementor-kit/assets/dev/js/portfolio-gallery.js ./jeg-elementor-kit/assets/dev/js/post-pagination.js ./jeg-elementor-kit/assets/dev/js/progress-bar.js ./jeg-elementor-kit/assets/dev/js/search.js ./jeg-elementor-kit/assets/dev/js/tabs.js ./jeg-elementor-kit/assets/dev/js/team.js ./jeg-elementor-kit/assets/dev/js/testimonials.js ./jeg-elementor-kit/assets/dev/js/video-button.js ***!

/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/accordion.js */\"./jeg-elementor-kit/assets/dev/js/accordion.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/animated-text.js */\"./jeg-elementor-kit/assets/dev/js/animated-text.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/client-logo.js */\"./jeg-elementor-kit/assets/dev/js/client-logo.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/countdown.js */\"./jeg-elementor-kit/assets/dev/js/countdown.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/fun-fact.js */\"./jeg-elementor-kit/assets/dev/js/fun-fact.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/gallery.js */\"./jeg-elementor-kit/assets/dev/js/gallery.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/mailchimp.js */\"./jeg-elementor-kit/assets/dev/js/mailchimp.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/nav-menu.js */\"./jeg-elementor-kit/assets/dev/js/nav-menu.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/off-canvas.js */\"./jeg-elementor-kit/assets/dev/js/off-canvas.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/pie-chart.js */\"./jeg-elementor-kit/assets/dev/js/pie-chart.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/portfolio-gallery.js */\"./jeg-elementor-kit/assets/dev/js/portfolio-gallery.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/post-pagination.js */\"./jeg-elementor-kit/assets/dev/js/post-pagination.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/progress-bar.js */\"./jeg-elementor-kit/assets/dev/js/progress-bar.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/search.js */\"./jeg-elementor-kit/assets/dev/js/search.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/tabs.js */\"./jeg-elementor-kit/assets/dev/js/tabs.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/team.js */\"./jeg-elementor-kit/assets/dev/js/team.js\");\n__webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/testimonials.js */\"./jeg-elementor-kit/assets/dev/js/testimonials.js\");\nmodule.exports = __webpack_require__(/*! /Users/pradnyanandana/Repository/JegStudio/jeg-element-kit/jeg-elementor-kit/assets/dev/js/video-button.js */\"./jeg-elementor-kit/assets/dev/js/video-button.js\");\n\n\n//# sourceURL=webpack:///multi_./jeg-elementor-kit/assets/dev/js/accordion.js_./jeg-elementor-kit/assets/dev/js/animated-text.js_./jeg-elementor-kit/assets/dev/js/client-logo.js_./jeg-elementor-kit/assets/dev/js/countdown.js_./jeg-elementor-kit/assets/dev/js/fun-fact.js_./jeg-elementor-kit/assets/dev/js/gallery.js_./jeg-elementor-kit/assets/dev/js/mailchimp.js_./jeg-elementor-kit/assets/dev/js/nav-menu.js_./jeg-elementor-kit/assets/dev/js/off-canvas.js_./jeg-elementor-kit/assets/dev/js/pie-chart.js_./jeg-elementor-kit/assets/dev/js/portfolio-gallery.js_./jeg-elementor-kit/assets/dev/js/post-pagination.js_./jeg-elementor-kit/assets/dev/js/progress-bar.js_./jeg-elementor-kit/assets/dev/js/search.js_./jeg-elementor-kit/assets/dev/js/tabs.js_./jeg-elementor-kit/assets/dev/js/team.js_./jeg-elementor-kit/assets/dev/js/testimonials.js_./jeg-elementor-kit/assets/dev/js/video-button.js?");

/***/ })

/******/ });